/**
 * Memory System Types
 * 
 * Dual memory architecture aligned with Mastra framework patterns
 * Supports user-scoped personal memory and global organizational memory
 * with semantic search capabilities via pgvector embeddings
 * 
 * Reference: docs/mastra-integration-patterns.md (Section 3: Memory Architecture)
 */

// ============================================================================
// Core Memory Types
// ============================================================================

/**
 * Memory scope
 */
export type MemoryScope = 'user' | 'global';

/**
 * Memory category for organization and filtering
 */
export type MemoryCategory =
  | 'preferences'
  | 'work'
  | 'personal'
  | 'knowledge'
  | 'analytics'
  | 'clinical'
  | 'business'
  | 'technical'
  | 'procedural'
  | 'system';

/**
 * Memory importance level
 * Higher numbers indicate more important memories
 */
export type MemoryImportance = 1 | 2 | 3 | 4 | 5;

// ============================================================================
// User Memory Types
// ============================================================================

/**
 * User-scoped memory for personal context and preferences
 * Stored in user_memories table with pgvector embeddings
 */
export interface UserMemory {
  /**
   * Unique identifier (UUID)
   */
  id: string;
  
  /**
   * User ID this memory belongs to
   * Links to profiles.id in Supabase
   */
  userId: string;
  
  /**
   * Memory content (natural language)
   * Used for semantic search and context injection
   */
  content: string;
  
  /**
   * Optional category for organization
   */
  category?: MemoryCategory;
  
  /**
   * Importance level (1-5)
   * Affects retrieval priority and context injection
   */
  importance?: MemoryImportance;
  
  /**
   * Vector embedding for semantic search
   * Generated by AWS Bedrock Titan v2 (1536 dimensions)
   * Stored as pgvector type in database
   */
  embedding?: number[];
  
  /**
   * Additional structured metadata
   * Can store tags, references, or custom data
   */
  metadata?: Record<string, unknown>;
  
  /**
   * Creation timestamp
   */
  createdAt: Date;
  
  /**
   * Last update timestamp
   */
  updatedAt: Date;
  
  /**
   * Soft delete timestamp (null if active)
   */
  deletedAt?: Date | null;
}

// ============================================================================
// Global Memory Types
// ============================================================================

/**
 * Global memory for organizational knowledge sharing
 * Stored in global_memories table with pgvector embeddings
 * Accessible across users based on role permissions
 */
export interface GlobalMemory {
  /**
   * Unique identifier (UUID)
   */
  id: string;
  
  /**
   * Memory content (natural language)
   * Organizational knowledge, procedures, policies
   */
  content: string;
  
  /**
   * Optional category for organization
   */
  category?: MemoryCategory;
  
  /**
   * Importance level (1-5)
   * Affects retrieval priority and context injection
   */
  importance?: MemoryImportance;
  
  /**
   * Vector embedding for semantic search
   * Generated by AWS Bedrock Titan v2 (1536 dimensions)
   */
  embedding?: number[];
  
  /**
   * Additional structured metadata
   */
  metadata?: Record<string, unknown>;
  
  /**
   * User ID who created this memory
   */
  createdBy: string;
  
  /**
   * Creation timestamp
   */
  createdAt: Date;
  
  /**
   * Last update timestamp
   */
  updatedAt: Date;
  
  /**
   * Soft delete timestamp (null if active)
   */
  deletedAt?: Date | null;
  
  /**
   * Access control list (role names)
   * Empty array means accessible to all authenticated users
   */
  accessControl?: string[];
}

// ============================================================================
// Memory Search Types
// ============================================================================

/**
 * Parameters for semantic memory search
 */
export interface MemorySearchParams {
  /**
   * Search query (natural language)
   */
  query: string;
  
  /**
   * User ID for user-scoped search
   * Required for 'user' scope, ignored for 'global'
   */
  userId?: string;
  
  /**
   * Memory scope to search
   */
  scope: MemoryScope | 'all';
  
  /**
   * Maximum number of results to return
   * Default: 10
   */
  limit?: number;
  
  /**
   * Similarity threshold (0-1)
   * Higher values return more similar results
   * Default: 0.7
   */
  threshold?: number;
  
  /**
   * Filter by category
   */
  category?: MemoryCategory;
  
  /**
   * Filter by minimum importance level
   */
  minImportance?: MemoryImportance;
  
  /**
   * Include deleted memories
   * Default: false
   */
  includeDeleted?: boolean;
}

/**
 * Memory search result with similarity score
 */
export interface MemorySearchResult {
  /**
   * The memory object
   */
  memory: UserMemory | GlobalMemory;
  
  /**
   * Cosine similarity score (0-1)
   * Higher values indicate better match
   */
  similarity: number;
  
  /**
   * Result rank (1-based)
   */
  rank: number;
  
  /**
   * Memory scope
   */
  scope: MemoryScope;
}

// ============================================================================
// Memory Operations Types
// ============================================================================

/**
 * Create user memory input
 */
export interface CreateUserMemoryInput {
  userId: string;
  content: string;
  category?: MemoryCategory;
  importance?: MemoryImportance;
  metadata?: Record<string, unknown>;
}

/**
 * Create global memory input
 */
export interface CreateGlobalMemoryInput {
  content: string;
  category?: MemoryCategory;
  importance?: MemoryImportance;
  metadata?: Record<string, unknown>;
  createdBy: string;
  accessControl?: string[];
}

/**
 * Update memory input
 */
export interface UpdateMemoryInput {
  id: string;
  content?: string;
  category?: MemoryCategory;
  importance?: MemoryImportance;
  metadata?: Record<string, unknown>;
  accessControl?: string[]; // For global memories only
}

/**
 * Delete memory input
 */
export interface DeleteMemoryInput {
  id: string;
  scope: MemoryScope;
  userId?: string; // Required for user scope
  hard?: boolean; // Hard delete vs soft delete
}

/**
 * List memories input
 */
export interface ListMemoriesInput {
  userId?: string; // Required for user scope
  scope: MemoryScope;
  category?: MemoryCategory;
  limit?: number;
  offset?: number;
  sortBy?: 'createdAt' | 'updatedAt' | 'importance';
  sortOrder?: 'asc' | 'desc';
  includeDeleted?: boolean;
}

/**
 * Bulk delete memories input
 */
export interface BulkDeleteMemoriesInput {
  ids: string[];
  scope: MemoryScope;
  userId?: string; // Required for user scope
  hard?: boolean;
}

// ============================================================================
// Memory Statistics Types
// ============================================================================

/**
 * Memory statistics for a user or global scope
 */
export interface MemoryStats {
  /**
   * Total number of memories
   */
  total: number;
  
  /**
   * Breakdown by category
   */
  byCategory: Record<MemoryCategory, number>;
  
  /**
   * Breakdown by importance level
   */
  byImportance: Record<MemoryImportance, number>;
  
  /**
   * Most recent memory timestamp
   */
  lastUpdated?: Date;
  
  /**
   * Total storage size in bytes
   */
  storageBytes: number;
  
  /**
   * Number of memories with embeddings
   */
  withEmbeddings: number;
}

// ============================================================================
// Memory Export/Import Types
// ============================================================================

/**
 * Memory export format
 */
export interface MemoryExport {
  /**
   * Export metadata
   */
  metadata: {
    exportDate: Date;
    scope: MemoryScope;
    userId?: string;
    version: string;
    totalCount: number;
  };
  
  /**
   * Exported memories
   */
  memories: Array<UserMemory | GlobalMemory>;
}

/**
 * Memory import input
 */
export interface MemoryImportInput {
  data: MemoryExport;
  scope: MemoryScope;
  userId?: string; // Required for user scope
  overwriteExisting?: boolean;
  validateEmbeddings?: boolean;
}

/**
 * Memory import result
 */
export interface MemoryImportResult {
  success: boolean;
  imported: number;
  skipped: number;
  errors: string[];
  duration: number;
}

// ============================================================================
// Memory Context Types
// ============================================================================

/**
 * Memory context for agent injection
 * Relevant memories retrieved based on current conversation
 */
export interface MemoryContext {
  /**
   * User-scoped memories
   */
  userMemories: MemorySearchResult[];
  
  /**
   * Global memories
   */
  globalMemories: MemorySearchResult[];
  
  /**
   * Total memories included
   */
  totalCount: number;
  
  /**
   * Retrieval timestamp
   */
  retrievedAt: Date;
  
  /**
   * Search query used for retrieval
   */
  searchQuery?: string;
}

// ============================================================================
// Memory Tool Types
// ============================================================================

/**
 * Memory tool operation result
 */
export interface MemoryOperationResult<T = unknown> {
  success: boolean;
  data?: T;
  error?: string;
  executionTime: number;
  memoryId?: string;
}

/**
 * Memory search tool result
 */
export interface MemorySearchToolResult extends MemoryOperationResult<MemorySearchResult[]> {
  totalResults: number;
  searchQuery: string;
  threshold: number;
}

/**
 * Memory list tool result
 */
export interface MemoryListToolResult extends MemoryOperationResult<Array<UserMemory | GlobalMemory>> {
  totalCount: number;
  offset: number;
  limit: number;
  hasMore: boolean;
}

// ============================================================================
// Memory Validation Types
// ============================================================================

/**
 * Memory validation error
 */
export interface MemoryValidationError {
  field: string;
  message: string;
  code: string;
}

/**
 * Memory validation result
 */
export interface MemoryValidationResult {
  valid: boolean;
  errors: MemoryValidationError[];
}

// ============================================================================
// Memory Configuration Types
// ============================================================================

/**
 * Memory system configuration
 */
export interface MemoryConfig {
  /**
   * User memories table name
   * Default: 'user_memories'
   */
  userTable: string;
  
  /**
   * Global memories table name
   * Default: 'global_memories'
   */
  globalTable: string;
  
  /**
   * Cache TTL in seconds
   * Default: 3600 (1 hour)
   */
  cacheTTL: number;
  
  /**
   * Maximum context items to inject
   * Default: 10
   */
  maxContextItems: number;
  
  /**
   * Default similarity threshold
   * Default: 0.7
   */
  defaultThreshold: number;
  
  /**
   * Enable automatic embedding generation
   * Default: true
   */
  autoGenerateEmbeddings: boolean;
  
  /**
   * Embedding model configuration
   */
  embeddingModel?: {
    provider: 'bedrock' | 'openai';
    modelId: string;
    dimensions: number;
  };
}

// ============================================================================
// Memory Store Interface
// ============================================================================

/**
 * Memory store operations interface
 * Defines the contract for memory persistence
 */
export interface MemoryStore {
  // User memory operations
  createUserMemory(input: CreateUserMemoryInput): Promise<UserMemory>;
  getUserMemory(id: string, userId: string): Promise<UserMemory | null>;
  updateUserMemory(input: UpdateMemoryInput, userId: string): Promise<UserMemory>;
  deleteUserMemory(id: string, userId: string, hard?: boolean): Promise<boolean>;
  listUserMemories(input: ListMemoriesInput): Promise<UserMemory[]>;
  searchUserMemories(params: MemorySearchParams): Promise<MemorySearchResult[]>;
  
  // Global memory operations
  createGlobalMemory(input: CreateGlobalMemoryInput): Promise<GlobalMemory>;
  getGlobalMemory(id: string): Promise<GlobalMemory | null>;
  updateGlobalMemory(input: UpdateMemoryInput): Promise<GlobalMemory>;
  deleteGlobalMemory(id: string, hard?: boolean): Promise<boolean>;
  listGlobalMemories(input: ListMemoriesInput): Promise<GlobalMemory[]>;
  searchGlobalMemories(params: MemorySearchParams): Promise<MemorySearchResult[]>;
  
  // Combined operations
  searchAllMemories(params: MemorySearchParams): Promise<MemorySearchResult[]>;
  getUserStats(userId: string): Promise<MemoryStats>;
  getGlobalStats(): Promise<MemoryStats>;
  
  // Bulk operations
  bulkDelete(input: BulkDeleteMemoriesInput): Promise<number>;
  exportMemories(scope: MemoryScope, userId?: string): Promise<MemoryExport>;
  importMemories(input: MemoryImportInput): Promise<MemoryImportResult>;
}

// ============================================================================
// Helper Types
// ============================================================================

/**
 * Type guard to check if memory is user memory
 */
export function isUserMemory(memory: UserMemory | GlobalMemory): memory is UserMemory {
  return 'userId' in memory;
}

/**
 * Type guard to check if memory is global memory
 */
export function isGlobalMemory(memory: UserMemory | GlobalMemory): memory is GlobalMemory {
  return 'createdBy' in memory && !('userId' in memory);
}

/**
 * Union type for any memory
 */
export type Memory = UserMemory | GlobalMemory;

/**
 * Memory with scope indicator
 */
export interface ScopedMemory {
  memory: Memory;
  scope: MemoryScope;
}